import React, { useState, useEffect } from "react";
import { Link, Navigate, useNavigate } from 'react-router-dom'
import Validation from './SignupValidation'
import axios from 'axios'
import bcrypt from 'bcryptjs';
import MakeItRain from './Rain';
import '../main/Home.css';
import {connect} from '../connect';

function Signup() {
    JSON.stringify(connect);

    const [values, setValues] = useState({
        login: "",
        email: "",
        password: "",
        class: "warrior"
    });
    const [errors, setErrors] = useState({});
    const [existingUserError, setExistingUserError] = useState({
        login: "",
        email: ""
    });
    const navigate = useNavigate();

    const handleInput = (event) => {
        setValues(prev => ({ ...prev, [event.target.name]: event.target.value }));
    };

    const handleSubmit = async (event) => {
        event.preventDefault();
    
        const validationErrors = Validation(values);
        setErrors(validationErrors);
    
        if (!Object.values(validationErrors).some(error => error)) {
            bcrypt.hash(values.password, 10).then(async (hashedPassword) => {
                try {
                    const response = await axios.post(`${connect}/signup`, { ...values, password: hashedPassword });
                    if (response.data.success) {
                        localStorage.setItem('isLoggedIn', true);
                        navigate('/');
                        
                        axios.post(`${connect}/login`,  values)
                            .then(res => {
                                if (res.data.success) {
                                    const { user } = res.data;
                                    localStorage.setItem('userData', JSON.stringify(user));
                                    
                                    window.location.reload();
                                } else {
                                    console.log("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
                                }
                            })
                            .catch(err => console.log(err));
                    } else {
                        console.log("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å");
                    }
                } catch (error) {
                    console.log(error);
                    if (error.response && error.response.data && error.response.data.error) {
                        const errorMessage = error.response.data.error;
                        const fieldErrors = {
                            login: errorMessage === '–õ–æ–≥–∏–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' ? '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.' : '',
                            email: errorMessage === '–ü–æ—á—Ç–∞ —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è' ? '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–æ–π –ø–æ—á—Ç–æ–π —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.' : '',
                        };
                        setExistingUserError(fieldErrors);
                    } else {
                        console.log("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä.");
                    }
                }
            });
        }
    };

    const classOptions = [
        { value: "warrior", label: "üó°Ô∏è –í–æ–∏–Ω" },
        { value: "archer", label: "üèπ –õ—É—á–Ω–∏–∫" },
        { value: "mage", label: "üîÆ –ú–∞–≥" }
    ];

    const handleSelectChange = (event) => {
        const selectedValue = event.target.value;
        const selectedOption = classOptions.find(option => option.value === selectedValue);
        setValues(prev => ({ ...prev, class: selectedOption.value }));
    };
   

    return (
        <div className="position-relative vh-100 overflow-hidden">
            <MakeItRain />
            <div className="position-absolute top-0 start-0 w-100 h-100 d-flex justify-content-center align-items-center overflow-hidden">
                <div className="bg-white p-4 rounded" style={{ width: '90%', maxWidth: '400px' }}>
                    <h2 className="mb-4 text-center">–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</h2>
                    <form onSubmit={handleSubmit}>
                        <div className="mb-3">
                            <label htmlFor="login"><strong>–õ–æ–≥–∏–Ω</strong></label>
                            <input type="text" placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω" className="form-control rounded-0" name="login" onChange={handleInput} />
                            {errors.login && <span className="text-danger"> {errors.login}</span>}
                            {existingUserError.login && <span className="text-danger"> {existingUserError.login}</span>}
                        </div>
                        <div className="mb-3">
                            <label htmlFor="email"><strong>–ü–æ—á—Ç–∞</strong></label>
                            <input type="email" placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –ø–æ—á—Ç—É" className="form-control rounded-0" name="email" onChange={handleInput} />
                            {errors.email && <span className="text-danger"> {errors.email}</span>}
                            {existingUserError.email && <span className="text-danger"> {existingUserError.email}</span>}
                        </div>
                        <div className="mb-3">
                            <label htmlFor="password"><strong>–ü–∞—Ä–æ–ª—å</strong></label>
                            <input type="password" placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å" className="form-control rounded-0" name="password" onChange={handleInput} />
                            {errors.password && <span className="text-danger"> {errors.password}</span>}
                        </div>
                        <p>–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ü–∏—Ñ—Ä—É, –æ–¥–Ω—É —Å—Ç—Ä–æ—á–Ω—É—é –±—É–∫–≤—É, –æ–¥–Ω—É –∑–∞–≥–ª–∞–≤–Ω—É—é –±—É–∫–≤—É –∏ –∏–º–µ—Ç—å –¥–ª–∏–Ω—É –Ω–µ –º–µ–Ω–µ–µ 8 —Å–∏–º–≤–æ–ª–æ–≤</p>
                        <div className="mb-3">
                            <label htmlFor="class"><strong>–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –∫–ª–∞—Å—Å</strong></label>
                            <select className="form-select" onChange={handleSelectChange} value={values.class}>
                                {classOptions.map(option => (
                                    <option key={option.value} value={option.value}>{option.label}</option>
                                ))}
                            </select>
                        </div>
                        <button type="submit" className="btn btn-success w-100 mb-3">–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è</button>
                        <Link to="/login" className="btn btn-light border w-100 mb-2">–í–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç</Link>
                        <Link to="/" className="btn btn-light border w-100">–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é</Link>
                    </form>
                </div>
            </div>
        </div>
    );
}

export default Signup;
